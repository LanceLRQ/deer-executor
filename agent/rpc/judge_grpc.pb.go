// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JudgementServiceClient is the client API for JudgementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JudgementServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	StartJudgement(ctx context.Context, in *JudgementRequest, opts ...grpc.CallOption) (*JudgementResponse, error)
}

type judgementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJudgementServiceClient(cc grpc.ClientConnInterface) JudgementServiceClient {
	return &judgementServiceClient{cc}
}

func (c *judgementServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/rpc.JudgementService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgementServiceClient) StartJudgement(ctx context.Context, in *JudgementRequest, opts ...grpc.CallOption) (*JudgementResponse, error) {
	out := new(JudgementResponse)
	err := c.cc.Invoke(ctx, "/rpc.JudgementService/StartJudgement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JudgementServiceServer is the server API for JudgementService service.
// All implementations must embed UnimplementedJudgementServiceServer
// for forward compatibility
type JudgementServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	StartJudgement(context.Context, *JudgementRequest) (*JudgementResponse, error)
	mustEmbedUnimplementedJudgementServiceServer()
}

// UnimplementedJudgementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJudgementServiceServer struct {
}

func (UnimplementedJudgementServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedJudgementServiceServer) StartJudgement(context.Context, *JudgementRequest) (*JudgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJudgement not implemented")
}
func (UnimplementedJudgementServiceServer) mustEmbedUnimplementedJudgementServiceServer() {}

// UnsafeJudgementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JudgementServiceServer will
// result in compilation errors.
type UnsafeJudgementServiceServer interface {
	mustEmbedUnimplementedJudgementServiceServer()
}

func RegisterJudgementServiceServer(s grpc.ServiceRegistrar, srv JudgementServiceServer) {
	s.RegisterService(&JudgementService_ServiceDesc, srv)
}

func _JudgementService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgementServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.JudgementService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgementServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgementService_StartJudgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgementServiceServer).StartJudgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.JudgementService/StartJudgement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgementServiceServer).StartJudgement(ctx, req.(*JudgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JudgementService_ServiceDesc is the grpc.ServiceDesc for JudgementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JudgementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.JudgementService",
	HandlerType: (*JudgementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _JudgementService_Ping_Handler,
		},
		{
			MethodName: "StartJudgement",
			Handler:    _JudgementService_StartJudgement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/judge.proto",
}
